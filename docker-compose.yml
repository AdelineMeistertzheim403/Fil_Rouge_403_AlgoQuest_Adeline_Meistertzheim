version: '3.8'

services:
    api:
        build:
            context: ./api
            args:
                DOCKER_GID: 994
        container_name: api-algoquest
        env_file:
            - .env
        environment:
            - SPRING_PROFILES_ACTIVE=prod
            - JWT_SECRET=${JWT_SECRET}
        secrets:
            - mongo_app_user
            - mongo_app_password
        ports:
            - "8080:8080"
        mem_limit: 512m
        cpus: "1.0"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - algoquest_tmp:/tmp/algoquest
        depends_on:
            mongo:
                condition: service_healthy
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 20s
        networks:
            - algoquest-net

    sandbox-java:
        build:
            context: .
            dockerfile: ./api/Dockerfile.sandbox
        container_name: sandbox-java
        image: algoquest-sandbox
        volumes:
            - algoquest_tmp:/tmp/algoquest
        mem_limit: 512m
        cpus: "1.0"

    mongo:
        image: mongo:6
        container_name: mongo-algoquest
        env_file:
            - .env
        volumes:
            - ./mongo-init:/docker-entrypoint-initdb.d:ro
            - mongo_data:/data/db
        secrets:
            - mongo_root_user
            - mongo_root_password
            - mongo_app_user
            - mongo_app_password
        environment:
            # Nom de la DB applicative (utilisé par le script d'init)
            MONGO_APP_DB: algoquestdb
            # Hack propre: on exporte les variables root depuis les secrets avant de démarrer le script officiel
            # -> évite d'écrire les identifiants en clair dans docker-compose
        entrypoint: [ "bash", "-lc", "export MONGO_INITDB_ROOT_USERNAME=$(cat /run/secrets/mongo_root_user) && export MONGO_INITDB_ROOT_PASSWORD=$(cat /run/secrets/mongo_root_password) && exec /usr/local/bin/docker-entrypoint.sh mongod" ]
        mem_limit: 1g
        cpus: "1.0"
        healthcheck:
            test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 20s
        networks:
            - algoquest-net

    mongo-express:
        image: mongo-express:1.0.2
        container_name: mongo-express-algoquest
        restart: always
        ports:
            - "${MONGO_EXPRESS_PORT}:8081"
        env_file:
            - .env
        environment:
            ME_CONFIG_MONGODB_SERVER: mongo
            ME_CONFIG_MONGODB_PORT: 27017
            ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
            ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
            ME_CONFIG_MONGODB_AUTH_DATABASE: admin
            ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USER}
            ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD}
        depends_on:
            mongo:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "curl", "-fsu", "${MONGO_EXPRESS_USER}:${MONGO_EXPRESS_PASSWORD}", "http://localhost:8081/"]
            interval: 30s
            timeout: 10s
            retries: 10
            start_period: 60s
        networks:
            - algoquest-net

volumes:
    mongo_data:
    algoquest_tmp:


networks:
    algoquest-net:

secrets:
  mongo_root_user:
    file: ./secrets/mongo_root_user.txt
  mongo_root_password:
    file: ./secrets/mongo_root_password.txt
  mongo_app_user:
    file: ./secrets/mongo_app_user.txt
  mongo_app_password:
    file: ./secrets/mongo_app_password.txt
