name: CI/CD - AlgoQuest

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend:
    name: Build and Push Backend API
    runs-on: ubuntu-latest
    services:
            mongo:
                image: mongo:latest
                ports:
                    - 27017:27017
                options: >-
                    --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
                    --health-interval=10s
                    --health-timeout=5s
                    --health-retries=5
    steps:
            - name: Checkout repository
              uses: actions/checkout@v4 # SHA: 692973e3d937129bcbf40652eb9f2f61becf3332

            - name: Set up JDK 17
              uses: actions/setup-java@v4 # SHA: 69f1b73496f0dce04aef978b0f36a0868b9a0e3e
              with:
                java-version: '17'
                distribution: 'temurin'

            - name: Build and Run Tests
              working-directory: ./api
              run: mvn -B clean verify -Dspring.profiles.active=test-ci

            - name: Upload JaCoCo Coverage
              uses: actions/upload-artifact@v4 # SHA: 1d4ba1fbb3b45e9e75b1013f9a0d8788f13b7c18
              with:
                name: jacoco-report
                path: api/target/site/jacoco

            - name: Upload JaCoCo report to Codecov
              uses: codecov/codecov-action@v4 # SHA: 0cfda1a68f6b99b9df6a68b48fdaea59da1f95bb
              with:
                token: ${{ secrets.CODECOV_TOKEN }}
                files: api/target/site/jacoco/jacoco.xml
                flags: unittests
                name: Java CI JaCoCo Report
                fail_ci_if_error: true

            # 🔒 Connexion à ta registry privée
            - name: Login to private Docker registry
              uses: docker/login-action@v3
              with:
                registry: registry.adelinemeistertzheim.fr
                username: admin
                password: ${{ secrets.REGISTRY_PASSWORD }}

            # 🏗️ Build et Push de l’image vers ta registry privée
            - name: Build and Push Docker image
              uses: docker/build-push-action@v5
              with:
                context: ./api
                push: true
                tags: registry.adelinemeistertzheim.fr/algoquest/backend:latest
                cache-from: type=registry,ref=registry.adelinemeistertzheim.fr/algoquest/backend:buildcache
                cache-to: type=inline

  frontend:
    runs-on: ubuntu-latest

    steps:
      # 🧩 Étape 1 — Récupération du dépôt
      - name: Checkout repository
        uses: actions/checkout@v4

      # 🧰 Étape 2 — Configuration Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # ⚙️ Étape 3 — Installation des dépendances
      - name: Install dependencies
        working-directory: algoquest-mobile
        run: npm ci

      # 🏗️ Étape 4 — Génération du projet Android (si pas déjà créé)
      - name: Generate native Android project
        working-directory: algoquest-mobile
        run: npx expo prebuild --platform android

      # 🔒 Étape 5 — Donner les droits à Gradle
      - name: Make gradlew executable
        working-directory: algoquest-mobile/android
        run: chmod +x gradlew

      # 🧱 Étape 6 — Compilation de l’APK Debug
      - name: Build Android debug APK
        working-directory: algoquest-mobile/android
        run: ./gradlew assembleDebug

      # 🔍 Étape 7 — Vérification du dossier de sortie
      - name: Debug — list APK output
        run: ls -R algoquest-mobile/android/app/build/outputs/apk

      # 📦 Étape 8 — Upload de l’APK en artifact GitHub
      - name: Upload debug APK
        uses: actions/upload-artifact@v4
        with:
          name: algoquest-apk
          path: algoquest-mobile/android/app/build/outputs/apk/debug/app-debug.apk
          if-no-files-found: error

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: ${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') && success() }}

    steps:
        - name: Checkout repository
          uses: actions/checkout@v4 # SHA: 692973e3d937129bcbf40652eb9f2f61becf3332

        - name: Deploy via SSH to VPS
          uses: appleboy/ssh-action@v1.0.3
          with:
            host: ${{ secrets.VPS_HOST }}
            username: ${{ secrets.VPS_USER }}
            key: ${{ secrets.VPS_SSH_KEY }}
            script: |
                docker login registry.adelinemeistertzheim.fr -u admin -p '${{ secrets.REGISTRY_PASSWORD }}'
                cd /home/debian/algoquest
                docker compose pull api
                docker compose down
                docker compose up -d

