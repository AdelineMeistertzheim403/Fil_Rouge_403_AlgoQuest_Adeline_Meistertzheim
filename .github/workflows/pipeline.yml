name: CI/CD - AlgoQuest

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  #  Étape 1 : Détecter les fichiers modifiés
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      common: ${{ steps.filter.outputs.common }}
    steps:
      - uses: actions/checkout@v4

      - name: Detect changed paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          list-files: shell
          filters: |
            backend:
              - 'api/**'
              - 'api/Dockerfile'
              - 'api/Dockerfile.sandbox'
            frontend:
              - 'algoquest-mobile/**'
            common:
              - '.github/**'
              - 'docker-compose.yml'
              - 'README.md'

  #  Backend build & push
  backend:
    name: Build and Push Backend API
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true'

    services:
      mongo:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build and Run Tests
        working-directory: ./api
        run: mvn -B clean verify --batch-mode -Dspring.profiles.active=test-ci

      - name: Upload JaCoCo Coverage
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: api/target/site/jacoco

      - name: Upload JaCoCo report to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: api/target/site/jacoco/jacoco.xml
          flags: unittests
          name: Java CI JaCoCo Report
          fail_ci_if_error: true

      - name: Login to private Docker registry
        uses: docker/login-action@v3
        with:
          registry: registry.adelinemeistertzheim.fr
          username: admin
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and Push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: true
          tags: registry.adelinemeistertzheim.fr/algoquest/backend:latest
          cache-from: type=registry,ref=registry.adelinemeistertzheim.fr/algoquest/backend:buildcache
          cache-to: type=inline

  #  Sandbox build & push
  sandbox:
    name: Build and Push Sandbox Image
    runs-on: ubuntu-latest
    needs: backend
    if: needs.changes.outputs.backend == 'true' && needs.backend.result == 'success'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to private Docker registry
        uses: docker/login-action@v3
        with:
          registry: registry.adelinemeistertzheim.fr
          username: admin
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and Push sandbox image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: api/Dockerfile.sandbox
          push: true
          tags: registry.adelinemeistertzheim.fr/algoquest/sandbox:latest
          cache-from: type=registry,ref=registry.adelinemeistertzheim.fr/algoquest/sandbox:buildcache
          cache-to: type=inline

  #  Frontend build (Expo / React Native)
  frontend:
    name: Build Mobile Front
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' && needs.changes.outputs.common != 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      #  Ajout du cache pour accélérer le build
      - name: Cache Expo, Gradle & Node
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.npm
            ~/.cache/expo
          key: ${{ runner.os }}-expo-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-expo-

      - name: Install dependencies
        working-directory: algoquest-mobile
        run: npm ci

      - name: Generate native Android project
        working-directory: algoquest-mobile
        run: npx expo prebuild --platform android

      - name: Make gradlew executable
        working-directory: algoquest-mobile/android
        run: chmod +x gradlew

      - name: Build Android debug APK
        working-directory: algoquest-mobile/android
        run: ./gradlew assembleDebug

      - name: Upload debug APK
        uses: actions/upload-artifact@v4
        with:
          name: algoquest-apk
          path: algoquest-mobile/android/app/build/outputs/apk/debug/app-debug.apk
          if-no-files-found: error

  # Déploiement automatique
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: [backend, sandbox]
    if: |
      always() &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name:  Skip if nothing was built
        if: |
          (
            (needs.backend.result != 'success') &&
            (needs.sandbox.result != 'success')
          )
        run: |
          echo " Aucun composant n'a été rebuild, déploiement ignoré."
          exit 0

      - name: Checkout repository
        uses: actions/checkout@v4

      - name:  Deploy via SSH to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            docker login registry.adelinemeistertzheim.fr -u admin -p '${{ secrets.REGISTRY_PASSWORD }}'
            cd /home/debian/algoquest
            docker compose up -d --pull always

